           МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
         ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ
                    РАДІОЕЛЕКТРОНІКИ




                  Кафедра «Програмна інженерія»




                                ЗВІТ
                      до практичного заняття №2
               з дисципліни «Аналіз та рефакторинг коду»
    на тему: «Методи рефакторингу коду програмного забезпечення»




Виконав:                                   Перевірив:
ст. гр. ПЗПІ-22-7                          ст. викладач кафедри ПІ
Чалий Олександр Олександрович              Сокорчук Ігор Петрович




                            Харків 2024
   1. Мета
Ознайомитися з методами рефакторингу коду програмного забезпечення,
зрозуміти їхнє практичне застосування та закріпити навички покращення
якості коду.
   2. Завдання
Обрати обрати 3 метода рефакторингу. Створити презентацію на тему
«Методи рефакторингу коду програмного забезпечення».
   3. Хід роботи
Було обрано мову програмування C# та 3 методи рефакторингу:
   ● Replace Exception with Test
   ● Replace Parameter with Method
   ● Push Down Method
У презентації (Додаток А) наведено пояснення цих трьох методів, а також
приклад коду до і після застосування цих рекомендацій.
   4. Висновки
Набуто навичок рефакторингу програмного коду, детально розглянуто
деякі методи рефакторингу програмного коду.

Посилання на відео-презентацію:
https://www.youtube.com/watch?v=sZWmq2VIdss
                             Додаток А
Презентація «Методи рефакторингу коду програмного забезпечення»
Методи
рефакторингу коду
програмного
забезпечення
     ПЗПІ-22-7 Чалий Олександр



                                 1
Методи рефакторингу
Рефакторинг — це процес покращення коду без зміни його функціональності.
Основна мета рефакторингу — зробити код більш читабельним,
підтримуваним та менш схильним до помилок.

Розглянемо такі методи:

 ●   Replace Exception with Test
 ●   Replace Parameter with Method
 ●   Push Down Method




                                                                           2
Replace Exception with Test
Цей метод замінює обробку винятків (try-catch) на попередню перевірку стану
чи даних. Він дозволяє уникнути зайвих витрат на обробку винятків, роблячи
код простішим і ефективнішим.




                                                                              3
Пояснення методу
Заміна try-catch на попередню перевірку дозволяє уникнути ресурсоємних
операцій обробки винятків.

Використання методу int.TryParse забезпечує ефективну та безпечну
перевірку вводу.

Цей підхід особливо корисний, коли перевірки виконуються часто.

Перевірка запобігає виникненню помилок, які можна легко уникнути.




                                                                         4
Replace Parameter with Method
Цей метод замінює зайві параметри на виклики методів або константи, що
спрощує код і зменшує ризик помилок. Це допомагає уникнути дублювання,
зменшує залежності та покращує підтримуваність програми.




                                                                         5
Пояснення методу
Параметр pi зайвий, оскільки значення числа π можна отримати з бібліотеки
Math.

Використання Math.PI зменшує ризик помилок через некоректне значення.

Це спрощує метод CalculateArea і робить код стандартизованим.

Код стає легшим для читання іншими розробниками.




                                                                            6
Push Down Method
Цей метод переносить специфічні для підкласу методи з базового класу,
покращуючи структуру коду. Це підвищує узгодженість і допомагає уникнути
порушень принципів ООП, таких як принцип єдиного обов'язку.




                                                                           7
Пояснення методу
Метод Bark() є специфічним для класу Dog, оскільки не всі тварини можуть
гавкати.

Якщо залишити цей метод у базовому класі Animal, можна дозволити виклики
для тварин, як-от Cat або Fish.

Перенесення Bark() до підкласу Dog робить структуру коду логічнішою.

Це забезпечує правильне використання принципів об'єктно-орієнтованого
програмування.




                                                                           8
Висновки


Рефакторинг робить код чистим, простим і легким для підтримки, зменшуючи
складність і ймовірність помилок. Це полегшує внесення змін і покращує
якість програмного забезпечення.




                                                                           9

