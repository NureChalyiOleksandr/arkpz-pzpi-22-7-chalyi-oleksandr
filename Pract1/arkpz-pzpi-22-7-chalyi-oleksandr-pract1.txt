            МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

         ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ
                   РАДІОЕЛЕКТРОНІКИ


                  Кафедра «Програмна інженерія»




                                ЗВІТ
                      до практичного заняття №1
              з дисципліни «Аналіз та рефакторинг коду»
          на тему: «Правила оформлення програмного коду»




Виконав:                                  Перевірив:
ст. гр. ПЗПІ-22-7                         ст. викладач кафедри ПІ
Чалий Олександр Олександрович             Сокорчук Ігор Петрович




                           Харків 2024
1 Мета
Навчитися рефакторингу програмного коду, закріпити основні правила
оформлення коду.

2 Завдання
Обрати мову програмування для прикладів коду. Створити презентацію на
тему «Правила оформлення програмного коду».

3 Хід роботи
Було обрано мову програмування Lua. У презентації (Додаток А) наведено
основні рекомендації щодо оформлення програмного коду з описами, а
також приклад коду до і після застосування цих рекомендацій.

Висновки
Набуто навичок рефакторингу програмного коду, детально розглянуто
основні правила оформлення коду.
Посилання на відео-презентацію https://youtu.be/KtsY7RgrbB8
                            ДОДАТОК А
Презентація на тему «Правила оформлення програмного коду».
Основні рекомендації написання коду для мови
             програмування Lua




                                   Чалий Олександр
                                   Олександрович
                                   ст. гр. ПЗПІ-22-7
                                                       1
Важливість правил оформлення програмного коду
Правила оформлення коду
забезпечують зрозумілість, легкість
підтримки та зменшують кількість
помилок у командних проєктах.




                                                2
Стандартизація коду для команди
Єдині стандарти оформлення коду
полегшують розуміння чужого коду та
сприяють кращій співпраці між
розробниками




                                      3
Переваги стандартизації
●   Читабельність
●   Підтримуваність
●   Мінімізація помилок




                          4
Структура проэкту
Організація файлів у проєкті має бути
логічною для полегшення тестування
та повторного використання.




                                        5
Логічний поділ на модулі та функції
Створення окремих модулів
робить код чистішим і легшим для
тестування.




                                      6
Використання коментарів
Коментарі пояснюють, чому
виконується дія, а не що саме
робиться в коді.




                                7
Відступи: пробіли чи табуляція?
У Lua рекомендуються пробіли
для відступів, щоб забезпечити
однозначну відстань.




                                  8
Іменування змінних та функцій
Вибір зрозумілих імен змінних і
функцій важливий для
читабельності та зрозумілості
коду.




                                  9
Конвенції іменування
Іменування має бути лаконічним і
описовим.




                                   10
Документування коду
Документація важлива для
розуміння параметрів і функцій.




                                  11
Тести та модульність
Чистий код полегшує тестування
та подальшу модифікацію.




                                 12
Вплив чистоти коду на продуктивність команди
Чистий код підвищує ефективність
команди, зменшує кількість
помилок і полегшує тестування.




                                               13
Хороший приклад оформлення коду
Простий і зрозумілий код, що
містить правильне іменування та
документацію.




                                  14
Поганий приклад оформлення коду
Код із неінформативними іменами
та відсутністю документації.




                                  15
Висновки
Правила оформлення коду
допомагають зменшити помилки
та покращити командну роботу.
Важливо дотримуватись
стандартів, тестувати код та
правильно організовувати
структуру проєкту.




                                16
Список використаних джерел
●   Lua documentation
●   Robert C. Martin (Uncle Bob). "Clean Code: A Handbook of Agile Software
    Craftsmanship"




                                                                              17
