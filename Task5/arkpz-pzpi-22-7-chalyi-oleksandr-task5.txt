МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ 
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ 








Кафедра «Програмна інженерія» 












ЗВІТ 
до лабораторної роботи №5
 з дисципліни «Аналіз та рефакторинг коду» 
на тему: «РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ» 












Виконав:                                                         Перевірив: 
ст. гр. ПЗПІ-22-7                                                 ст. викладач кафедри ПІ 
Чалий Олександр Олександрович                         Сокорчук Ігор Петрович 
















Харків 2024
1. Завдання:
Розгорнути реалізовану програмну систему. Перевірити та налаштувати роботу розгорнутої програмної системи.
2. Хід роботи:
Посилання на відеозапис: https://youtu.be/YXnv3d2sV6U 


Розроблена програмна система призначена для автоматичного регулювання вуличного освітлення на основі даних із сенсорів руху, рівня природного освітлення та погодних умов. Система складається з серверної частини, написаної на платформі ASP.NET Core, і бази даних, керованої Microsoft SQL Server. Система інтегрована з IoT-підсистемою, яка використовує мікроконтролер ESP32 для збору даних із сенсорів і взаємодії з сервером через MQTT.
Серверна частина:
* Мова програмування: Серверна частина програми написана на мові C#.
* Фреймворк: Використовується ASP.NET Core (версія 8.0 або вище), що забезпечує високу продуктивність і можливість крос-платформного розгортання.
* Контролери та маршрутизація: У проєкті налаштовані контролери для обробки запитів від IoT-пристроїв. Кожна функціональність має окремий метод для обробки GET, POST, PUT та DELETE запитів. Маршрутизація забезпечує доступ до кінцевих точок API.
* Сервіси та залежності: У проєкті застосовано механізм впровадження залежностей (Dependency Injection) для управління сервісами, які відповідають за обробку даних, бізнес-логіку та зв’язок із базою даних.
Локальна база даних:
* СУБД: Для зберігання даних використовується Microsoft SQL Server. Це рішення забезпечує масштабованість, високу продуктивність та надійність.
* Структура бази даних: База даних містить таблиці для зберігання даних про сенсори, ліхтарі, користувачів, використання електроенергії, погодні умови, оповіщення та логи обслуговування.
* Міграції та оновлення: Використовується Entity Framework Core для створення та оновлення структури бази даних за допомогою міграцій. Команда Update-Database синхронізує базу даних із моделями проєкту.
API:
* Кінцеві точки: API надає кінцеві точки для передачі даних від мікроконтролера ESP32 та отримання обчислених параметрів для управління освітленням.
* Специфікація API: Використовується Swagger для документування API, що спрощує його тестування та інтеграцію.
Інтеграція з IoT-пристроями:
* Підключення пристроїв: Використовується мікроконтролер ESP32 із підключеними датчиками руху, освітлення та погодних умов.
* Обмін даними: Дані із сенсорів надсилаються на сервер через MQTT брокер, де вони обробляються для розрахунку оптимального рівня яскравості.
* Обробка даних: Сервер аналізує отримані дані та повертає на пристрій команду для регулювання рівня яскравості освітлення.
Використані інструменти та технології:
* Visual Studio: Основне середовище розробки для написання та налагодження коду.
* MSSQL Server: Для зберігання даних.
* Entity Framework Core: Забезпечує роботу з базою даних через ORM.
* Swagger: Для документування API.
* Git: Система контролю версій для зберігання та управління кодом.
Встановлення системи:
1. Підготовка середовища:
Для роботи серверної частини необхідно встановити .NET Core версії 8.0 або вище, Microsoft SQL Server та Microsoft SQL Server Management Studio (SSMS).
2. Клонування репозиторію:
Для завантаження коду проєкту необхідно виконати команду:
git clone "посилання на репозиторій".
3. Налаштування бази даних:
Для створення бази даних слід відкрити проєкт у Visual Studio та виконати команду в консолі Package Manager: Update-Database.
4. Запуск серверної частини:
Для запуску серверної частини використовується середовище Visual Studio, яке забезпечує локальне розгортання програми.
5. Підключення IoT-пристроїв:
Для інтеграції з IoT-пристроями необхідно налаштувати мікроконтролер ESP32 для передачі даних через MQTT брокер.
6. Перевірка API:
Для тестування кінцевих точок API доступна документація у Swagger, яка автоматично генерується під час роботи серверної частини.
3. Висновок:
Програмна система успішно розгорнута та протестована в локальному середовищі. Хоча через відсутність доступу до зовнішнього сервера система не була розгорнута на віддаленому сервері, всі компоненти працюють коректно на локальній машині. Це дозволяє продемонструвати всі аспекти роботи системи та її функціональність. Інтеграція з ІоТ системою вимірювання даних з сенсорів забезпечує автоматичне регулювання вуличного освітлення на основі отриманих даних. В подальшому система може бути легко розгорнута на віддаленому сервері за наявності відповідного доступу та інфраструктури.
