           МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
         ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ
                    РАДІОЕЛЕКТРОНІКИ




                  Кафедра «Програмна інженерія»




                                ЗВІТ
                     до лабораторної роботи №2
              з дисципліни «Аналіз та рефакторинг коду»
   на тему: «РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ
   ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО
                        ІНТЕРФЕЙСУ (API)»




Виконав:                                 Перевірив:
ст. гр. ПЗПІ-22-7                        ст. викладач кафедри ПІ
Чалий Олександр Олександрович            Сокорчук Ігор Петрович




                           Харків 2024
Завдання:
Розробити базу даних для серверної частини програмної системи та
прикладного программного інтерфейсу.
Хід роботи:
Посилання на відеозапис: https://youtu.be/-qc5uLDCiAc
   1. Розробка UML діаграми прецедентів
Так як система орієнтована на автоматичне функціонування, у якості
акторів було обрано Адміністратора який відповідає за налаштування
системи та Технічного спеціаліста який відповідає за моніторинг даних
для слідкування за несправностями. У якості прецедентів: перегляд та
управління даними системи, управління користувачами, зміна
налаштувань системи.
У результаті отримаємо таку діаграму(рис. 1):
                   Рисунок 1 - Діаграма прецедентів
  2. Розробка ER-діаграми для бази даних
Для бази даних обрано такі таблиці:
  ● Користувач(User)
  ● Вулична лампа(StreetLight)
  ● Сенсор(Sensor)
  ● Використання електроенергії(Energy Usage)
  ● Сповіщення(Alert)
  ● Журнал обслуговування(Maintenance Log)
  ● Дані погоди(Weather Data)




                  Рисунок 2 - ER-діаграма бази даних

   3. Розробка БД та діаграми її структури
Для створення бази даних була використана функціональність міграцій в
ASP .NET Core. Для цього були створені відповідні моделі таблиць та
контекст бази даних у коді програми.
У результаті створено базу даних(рис. 3).
                  Рисунок 3 - Діаграма структури БД

   4. Розробка функцій роботи з БД
Створено функції для роботи з базою даних за допомогою ORM та
реалізовані через репозиторії. Вони включають операції для створення,
оновлення, видалення та отримання даних із бази, використовуючи Entity
Framework та контекст бази даних. Приклад функцій роботи з БД наведено
у додатку А.

   5. Розробка API та специфікації
Було створено API за допомогою контролерів в ASP .NET Core, які
обробляють HTTP запити (GET, POST, PUT, DELETE). Кожен контролер
відповідає за певну частину функціональності, наприклад, створення,
оновлення, видалення та отримання записів з бази даних. Приклад
контроллеру наведено у додатку Б.
Зокрема, розроблено контролери з такими запитами:

Alert:
   1. POST /api/Alert — Створення нового сповіщення.
   2. GET /api/Alert — Отримання всіх сповіщень.
   3. GET /api/Alert{id} — Отримання конкретного сповіщення.
   4. PUT /api/Alert{id} — Редагування сповіщення.
   5. DELETE /api/Alert{id} — Видалення сповіщення.
Auth:
   1. POST /api/Auth/Register — Створення нового користувача.
   2. POST /api/Auth/Login — Вхід у систему(Отримання токену для
       авторизації).
EnergyUsage:
   1. POST /api/EnergyUsage — Створення нового запису про
       використання електроенергії.
   2. GET /api/EnergyUsage — Отримання всіх записів про використання
       електроенергії.
   3. GET /api/EnergyUsage{id} — Отримання конкретного запису про
       використання електроенергії.
   4. PUT /api/EnergyUsage{id} — Редагування запису про використання
       електроенергії.
   5. DELETE /api/EnergyUsage{id} — Видалення запису про
       використання електроенергії.
MaintenanceLogs:
   1. POST /api/MaintenanceLogs — Створення нового запису про
       обслуговування.
   2. GET /api/MaintenanceLogs — Отримання всіх записів про
       обслуговування.
   3. GET /api/MaintenanceLogs{id} — Отримання конкретного запису
       про обслуговування.
   4. PUT /api/MaintenanceLogs{id} — Редагування запису про
       обслуговування.
   5. DELETE /api/AMaintenanceLogslert{id} — Видалення запису про
       обслуговування.
Sensor:
   1. POST /api/Sensor — Створення нового сенсору.
   2. GET /api/Sensor — Отримання всіх сенсорів.
   3. GET /api/Sensor{id} — Отримання конкретного сенсору.
   4. PUT /api/Sensor{id} — Редагування сенсору.
   5. DELETE /api/Sensor{id} — Видалення сенсору.
Streetlight:
   1. POST /api/Streetlight — Створення нового вуличного ліхтаря.
   2. GET /api/Streetlight — Отримання всіх вуличних ліхтарів.
   3. GET /api/Streetlight{id} — Отримання конкретного вуличного
       ліхтаря.
   4. PUT /api/Streetlight{id} — Редагування вуличного ліхтаря.
   5. DELETE /api/Streetlight{id} — Видалення вуличного ліхтаря.
User:
   1. GET /api/User — Отримання всіх користувачів.
   2. GET /api/User{id} — Отримання конкретного користувача.
   3. PUT /api/User{id} — Редагування користувача.
   4. DELETE /api/User{id} — Видалення користувача.
WeatherData:
   1. POST /api/WeatherData — Створення нового запису про погоду.
   2. GET /api/WeatherData — Отримання всіх записів про погоду.
   3. GET /api/WeatherData{id} — Отримання конкретного запису про
       погоду.
   4. PUT /api/WeatherData{id} — Редагування запису про погоду.
   5. DELETE /api/WeatherData{id} — Видалення запису про погоду.
                              Додаток А
Приклад функцій взаємодії серверної частини з БД для таблиці StreetLight

namespace SmartLightSense.Repositories;

public class StreetlightRepository : IStreetlightRepository
{
  private readonly DBContext _context;

  public StreetlightRepository(DBContext context)
  {
    _context = context;
  }

  // Create
  public async Task<Streetlight> CreateAsync(Streetlight streetlight)
  {
     _context.Streetlights.Add(streetlight);
     await _context.SaveChangesAsync();
     return streetlight;
  }

  // Update
  public async Task<Streetlight> UpdateAsync(Streetlight streetlight)
  {
     _context.Streetlights.Update(streetlight);
     await _context.SaveChangesAsync();
     return streetlight;
  }

  // Delete
  public async Task<bool> DeleteAsync(int streetlightId)
  {
     var streetlight = await _context.Streetlights.FindAsync(streetlightId);
     if (streetlight == null) return false;

      _context.Streetlights.Remove(streetlight);
      await _context.SaveChangesAsync();
      return true;
  }
    // Get by Id
    public async Task<Streetlight> GetByIdAsync(int streetlightId)
    {
       return await _context.Streetlights
                 .Include(s => s.Sensors)
                 .FirstOrDefaultAsync(sl => sl.Id == streetlightId);
    }

    // Get all streetlights
    public async Task<List<Streetlight>> GetAllAsync()
    {
       return await _context.Streetlights
                 .Include(s => s.Sensors)
                 .ToListAsync();
    }
}
                                   Додаток Б
                         Приклад контроллеру StreetLight

namespace SmartLightSense.Controllers
{
  [ApiController]
  [Route("api/[controller]")]
  public class StreetlightController : ControllerBase
  {
    private readonly IStreetlightRepository _streetlightRepository;
    private readonly ISensorRepository _sensorRepository;

    public StreetlightController(IStreetlightRepository streetlightRepository,
ISensorRepository sensorRepository)
    {
      _streetlightRepository = streetlightRepository;
      _sensorRepository = sensorRepository;
    }

    [HttpGet]
    public async Task<ActionResult<List<StreetlightGetDto>>> GetAll()
    {
      var streetlights = await _streetlightRepository.GetAllAsync();

      var streetlightDtos = new List<StreetlightGetAllDto>();

      foreach (var streetlight in streetlights)
      {
        var streetlightDto = new StreetlightGetAllDto(
           streetlight.Id,
           streetlight.Location,
           streetlight.Type,
           streetlight.InstallationDate,
           streetlight.Status,
           streetlight.BrightnessLevel,
           streetlight.LastMaintenanceDate
        );

          streetlightDtos.Add(streetlightDto);
      }

      return Ok(streetlightDtos);
    }



    [HttpGet("{id}")]
    public async Task<ActionResult<StreetlightDto>> GetById(int id)
    {
      var streetlight = await _streetlightRepository.GetByIdAsync(id);

        if (streetlight == null) return NotFound();

        var sensors = await _sensorRepository.GetByStreetLightIdAsync(id);

        var streetlightDto = new StreetlightGetDto(
           streetlight.Id,
           streetlight.Location,
           streetlight.Type,
           streetlight.InstallationDate,
           streetlight.Status,
           streetlight.BrightnessLevel,
           streetlight.LastMaintenanceDate,
           sensors.Select(sensor => new SensorGetDto(
             sensor.Id,
             sensor.SensorType,
             sensor.InstallationDate,
             sensor.Status,
             sensor.Data,
             sensor.LastUpdate))
        );

        return Ok(streetlightDto);
    }

    [HttpPost]
    public async Task<ActionResult<StreetlightDto>> Create([FromBody]
StreetlightCreateDto streetlightCreateDto)
    {
       var newStreetlight = new Streetlight
       {
          Location = streetlightCreateDto.Location,
          InstallationDate = DateTime.Now,
          Status = streetlightCreateDto.Status,
          Type = streetlightCreateDto.Type,
             BrightnessLevel = streetlightCreateDto.BrightnessLevel,
             LastMaintenanceDate = DateTime.UtcNow
        };

       var createdStreetlight = await
_streetlightRepository.CreateAsync(newStreetlight);

        return Ok(createdStreetlight);
    }

    [HttpPut("{id}")]
    public async Task<ActionResult<StreetlightDto>> Update(int id, [FromBody]
StreetlightUpdateDto streetlightUpdateDto)
    {
       var existingStreetlight = await _streetlightRepository.GetByIdAsync(id);

        if (existingStreetlight == null) return NotFound();

        if (!string.IsNullOrEmpty(streetlightUpdateDto.Location))
        {
           existingStreetlight.Location = streetlightUpdateDto.Location;
        }

        if (!string.IsNullOrEmpty(streetlightUpdateDto.Status))
        {
           existingStreetlight.Status = streetlightUpdateDto.Status;
        }

        if (streetlightUpdateDto.BrightnessLevel != null)
        {
           existingStreetlight.BrightnessLevel =
(int)streetlightUpdateDto.BrightnessLevel;
        }

      if (streetlightUpdateDto.LastMaintenanceDate != null)
      {
         existingStreetlight.LastMaintenanceDate =
(DateTime)streetlightUpdateDto.LastMaintenanceDate;
      }

       var updatedStreetlight = await
_streetlightRepository.UpdateAsync(existingStreetlight);
            var sensors = await _sensorRepository.GetByStreetLightIdAsync(id);

            var updatedStreetlightDto = new StreetlightGetAllDto(
               updatedStreetlight.Id,
               updatedStreetlight.Location,
               updatedStreetlight.Type,
               updatedStreetlight.InstallationDate,
               updatedStreetlight.Status,
               updatedStreetlight.BrightnessLevel,
               updatedStreetlight.LastMaintenanceDate
            );

            return Ok(updatedStreetlightDto);
        }



        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
          var success = await _streetlightRepository.DeleteAsync(id);

            if (!success) return NotFound();

            return Ok();
        }
    }
}

